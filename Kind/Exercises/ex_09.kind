// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs{
      nil: [] //List.nil nao serve aqui, pq??
      cons: case ys{
          nil: [] //nem aqui
          cons: List.cons!(Pair.new!!(xs.head, ys.head), zip!!(xs.tail,ys.tail))
      }
  }

// Returns the smallest element of a List
smallest(xs: List<Nat>): Maybe<Nat>
  case xs{
      nil: none
      cons: case xs.tail{
          nil: some(xs.head)
          cons: case Nat.ltn(xs.head, xs.tail.head){
              false: smallest(xs.tail)
              true: smallest(List.cons!(xs.head, xs.tail.tail))
          }
      }
  }

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  case xs{
      nil: List.nil!
      cons: 
        let smallest = smallest(xs) <> 0
        case Nat.eql(xs.head, smallest){
            true: xs.tail
            false: List.cons!(xs.head, delete_smallest(xs.tail))      
      }
  }

// Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  case xs{
  nil: List.nil!
  cons:
      let smallest = smallest(xs) <> 0 
      List.cons!(smallest, sort_ascending(delete_smallest(xs)))
  }

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
    case xs{
        nil: Maybe.none!
        cons: case idx{
            zero: Maybe.some!(xs.head)
            succ: get!(idx.pred, xs.tail)          
        }
    }

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
    case xs{
        nil: List.nil!
        cons: case f(xs.head){
            false: filter!(f, xs.tail)
            true: List.cons!(xs.head, filter!(f, xs.tail))
        }
    }


ex_09: IO<Unit>
  IO {
    Tests._09.zip(zip)
    Tests._09.smallest(smallest)
    Tests._09.delete_smallest(delete_smallest)
    Tests._09.sort_ascending(sort_ascending)
    Tests._09.get(get)
    Tests._09.filter(filter)
  }